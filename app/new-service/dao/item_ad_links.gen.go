// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/model"
)

func newItemAdLinks(db *gorm.DB, opts ...gen.DOOption) itemAdLinks {
	_itemAdLinks := itemAdLinks{}

	_itemAdLinks.itemAdLinksDo.UseDB(db, opts...)
	_itemAdLinks.itemAdLinksDo.UseModel(&model.ItemAdLinks{})

	tableName := _itemAdLinks.itemAdLinksDo.TableName()
	_itemAdLinks.ALL = field.NewAsterisk(tableName)
	_itemAdLinks.ItemID = field.NewString(tableName, "item_id")
	_itemAdLinks.AdLinkID = field.NewString(tableName, "ad_link_id")

	_itemAdLinks.fillFieldMap()

	return _itemAdLinks
}

type itemAdLinks struct {
	itemAdLinksDo

	ALL      field.Asterisk
	ItemID   field.String
	AdLinkID field.String

	fieldMap map[string]field.Expr
}

func (i itemAdLinks) Table(newTableName string) *itemAdLinks {
	i.itemAdLinksDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemAdLinks) As(alias string) *itemAdLinks {
	i.itemAdLinksDo.DO = *(i.itemAdLinksDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemAdLinks) updateTableName(table string) *itemAdLinks {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewString(table, "item_id")
	i.AdLinkID = field.NewString(table, "ad_link_id")

	i.fillFieldMap()

	return i
}

func (i *itemAdLinks) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemAdLinks) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["ad_link_id"] = i.AdLinkID
}

func (i itemAdLinks) clone(db *gorm.DB) itemAdLinks {
	i.itemAdLinksDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemAdLinks) replaceDB(db *gorm.DB) itemAdLinks {
	i.itemAdLinksDo.ReplaceDB(db)
	return i
}

type itemAdLinksDo struct{ gen.DO }

type IItemAdLinksDo interface {
	gen.SubQuery
	Debug() IItemAdLinksDo
	WithContext(ctx context.Context) IItemAdLinksDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemAdLinksDo
	WriteDB() IItemAdLinksDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemAdLinksDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemAdLinksDo
	Not(conds ...gen.Condition) IItemAdLinksDo
	Or(conds ...gen.Condition) IItemAdLinksDo
	Select(conds ...field.Expr) IItemAdLinksDo
	Where(conds ...gen.Condition) IItemAdLinksDo
	Order(conds ...field.Expr) IItemAdLinksDo
	Distinct(cols ...field.Expr) IItemAdLinksDo
	Omit(cols ...field.Expr) IItemAdLinksDo
	Join(table schema.Tabler, on ...field.Expr) IItemAdLinksDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemAdLinksDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemAdLinksDo
	Group(cols ...field.Expr) IItemAdLinksDo
	Having(conds ...gen.Condition) IItemAdLinksDo
	Limit(limit int) IItemAdLinksDo
	Offset(offset int) IItemAdLinksDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemAdLinksDo
	Unscoped() IItemAdLinksDo
	Create(values ...*model.ItemAdLinks) error
	CreateInBatches(values []*model.ItemAdLinks, batchSize int) error
	Save(values ...*model.ItemAdLinks) error
	First() (*model.ItemAdLinks, error)
	Take() (*model.ItemAdLinks, error)
	Last() (*model.ItemAdLinks, error)
	Find() ([]*model.ItemAdLinks, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAdLinks, err error)
	FindInBatches(result *[]*model.ItemAdLinks, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ItemAdLinks) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemAdLinksDo
	Assign(attrs ...field.AssignExpr) IItemAdLinksDo
	Joins(fields ...field.RelationField) IItemAdLinksDo
	Preload(fields ...field.RelationField) IItemAdLinksDo
	FirstOrInit() (*model.ItemAdLinks, error)
	FirstOrCreate() (*model.ItemAdLinks, error)
	FindByPage(offset int, limit int) (result []*model.ItemAdLinks, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemAdLinksDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemAdLinksDo) Debug() IItemAdLinksDo {
	return i.withDO(i.DO.Debug())
}

func (i itemAdLinksDo) WithContext(ctx context.Context) IItemAdLinksDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemAdLinksDo) ReadDB() IItemAdLinksDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemAdLinksDo) WriteDB() IItemAdLinksDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemAdLinksDo) Session(config *gorm.Session) IItemAdLinksDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemAdLinksDo) Clauses(conds ...clause.Expression) IItemAdLinksDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemAdLinksDo) Returning(value interface{}, columns ...string) IItemAdLinksDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemAdLinksDo) Not(conds ...gen.Condition) IItemAdLinksDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemAdLinksDo) Or(conds ...gen.Condition) IItemAdLinksDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemAdLinksDo) Select(conds ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemAdLinksDo) Where(conds ...gen.Condition) IItemAdLinksDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemAdLinksDo) Order(conds ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemAdLinksDo) Distinct(cols ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemAdLinksDo) Omit(cols ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemAdLinksDo) Join(table schema.Tabler, on ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemAdLinksDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemAdLinksDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemAdLinksDo) Group(cols ...field.Expr) IItemAdLinksDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemAdLinksDo) Having(conds ...gen.Condition) IItemAdLinksDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemAdLinksDo) Limit(limit int) IItemAdLinksDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemAdLinksDo) Offset(offset int) IItemAdLinksDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemAdLinksDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemAdLinksDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemAdLinksDo) Unscoped() IItemAdLinksDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemAdLinksDo) Create(values ...*model.ItemAdLinks) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemAdLinksDo) CreateInBatches(values []*model.ItemAdLinks, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemAdLinksDo) Save(values ...*model.ItemAdLinks) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemAdLinksDo) First() (*model.ItemAdLinks, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdLinks), nil
	}
}

func (i itemAdLinksDo) Take() (*model.ItemAdLinks, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdLinks), nil
	}
}

func (i itemAdLinksDo) Last() (*model.ItemAdLinks, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdLinks), nil
	}
}

func (i itemAdLinksDo) Find() ([]*model.ItemAdLinks, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemAdLinks), err
}

func (i itemAdLinksDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAdLinks, err error) {
	buf := make([]*model.ItemAdLinks, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemAdLinksDo) FindInBatches(result *[]*model.ItemAdLinks, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemAdLinksDo) Attrs(attrs ...field.AssignExpr) IItemAdLinksDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemAdLinksDo) Assign(attrs ...field.AssignExpr) IItemAdLinksDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemAdLinksDo) Joins(fields ...field.RelationField) IItemAdLinksDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemAdLinksDo) Preload(fields ...field.RelationField) IItemAdLinksDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemAdLinksDo) FirstOrInit() (*model.ItemAdLinks, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdLinks), nil
	}
}

func (i itemAdLinksDo) FirstOrCreate() (*model.ItemAdLinks, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdLinks), nil
	}
}

func (i itemAdLinksDo) FindByPage(offset int, limit int) (result []*model.ItemAdLinks, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemAdLinksDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemAdLinksDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemAdLinksDo) Delete(models ...*model.ItemAdLinks) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemAdLinksDo) withDO(do gen.Dao) *itemAdLinksDo {
	i.DO = *do.(*gen.DO)
	return i
}
