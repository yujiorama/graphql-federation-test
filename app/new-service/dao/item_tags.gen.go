// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/model"
)

func newItemTags(db *gorm.DB, opts ...gen.DOOption) itemTags {
	_itemTags := itemTags{}

	_itemTags.itemTagsDo.UseDB(db, opts...)
	_itemTags.itemTagsDo.UseModel(&model.ItemTags{})

	tableName := _itemTags.itemTagsDo.TableName()
	_itemTags.ALL = field.NewAsterisk(tableName)
	_itemTags.ItemID = field.NewString(tableName, "item_id")
	_itemTags.TagID = field.NewString(tableName, "tag_id")

	_itemTags.fillFieldMap()

	return _itemTags
}

type itemTags struct {
	itemTagsDo

	ALL    field.Asterisk
	ItemID field.String
	TagID  field.String

	fieldMap map[string]field.Expr
}

func (i itemTags) Table(newTableName string) *itemTags {
	i.itemTagsDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemTags) As(alias string) *itemTags {
	i.itemTagsDo.DO = *(i.itemTagsDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemTags) updateTableName(table string) *itemTags {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewString(table, "item_id")
	i.TagID = field.NewString(table, "tag_id")

	i.fillFieldMap()

	return i
}

func (i *itemTags) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemTags) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["tag_id"] = i.TagID
}

func (i itemTags) clone(db *gorm.DB) itemTags {
	i.itemTagsDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemTags) replaceDB(db *gorm.DB) itemTags {
	i.itemTagsDo.ReplaceDB(db)
	return i
}

type itemTagsDo struct{ gen.DO }

type IItemTagsDo interface {
	gen.SubQuery
	Debug() IItemTagsDo
	WithContext(ctx context.Context) IItemTagsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemTagsDo
	WriteDB() IItemTagsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemTagsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemTagsDo
	Not(conds ...gen.Condition) IItemTagsDo
	Or(conds ...gen.Condition) IItemTagsDo
	Select(conds ...field.Expr) IItemTagsDo
	Where(conds ...gen.Condition) IItemTagsDo
	Order(conds ...field.Expr) IItemTagsDo
	Distinct(cols ...field.Expr) IItemTagsDo
	Omit(cols ...field.Expr) IItemTagsDo
	Join(table schema.Tabler, on ...field.Expr) IItemTagsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemTagsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemTagsDo
	Group(cols ...field.Expr) IItemTagsDo
	Having(conds ...gen.Condition) IItemTagsDo
	Limit(limit int) IItemTagsDo
	Offset(offset int) IItemTagsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemTagsDo
	Unscoped() IItemTagsDo
	Create(values ...*model.ItemTags) error
	CreateInBatches(values []*model.ItemTags, batchSize int) error
	Save(values ...*model.ItemTags) error
	First() (*model.ItemTags, error)
	Take() (*model.ItemTags, error)
	Last() (*model.ItemTags, error)
	Find() ([]*model.ItemTags, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemTags, err error)
	FindInBatches(result *[]*model.ItemTags, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ItemTags) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemTagsDo
	Assign(attrs ...field.AssignExpr) IItemTagsDo
	Joins(fields ...field.RelationField) IItemTagsDo
	Preload(fields ...field.RelationField) IItemTagsDo
	FirstOrInit() (*model.ItemTags, error)
	FirstOrCreate() (*model.ItemTags, error)
	FindByPage(offset int, limit int) (result []*model.ItemTags, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemTagsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemTagsDo) Debug() IItemTagsDo {
	return i.withDO(i.DO.Debug())
}

func (i itemTagsDo) WithContext(ctx context.Context) IItemTagsDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemTagsDo) ReadDB() IItemTagsDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemTagsDo) WriteDB() IItemTagsDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemTagsDo) Session(config *gorm.Session) IItemTagsDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemTagsDo) Clauses(conds ...clause.Expression) IItemTagsDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemTagsDo) Returning(value interface{}, columns ...string) IItemTagsDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemTagsDo) Not(conds ...gen.Condition) IItemTagsDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemTagsDo) Or(conds ...gen.Condition) IItemTagsDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemTagsDo) Select(conds ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemTagsDo) Where(conds ...gen.Condition) IItemTagsDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemTagsDo) Order(conds ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemTagsDo) Distinct(cols ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemTagsDo) Omit(cols ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemTagsDo) Join(table schema.Tabler, on ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemTagsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemTagsDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemTagsDo) Group(cols ...field.Expr) IItemTagsDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemTagsDo) Having(conds ...gen.Condition) IItemTagsDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemTagsDo) Limit(limit int) IItemTagsDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemTagsDo) Offset(offset int) IItemTagsDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemTagsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemTagsDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemTagsDo) Unscoped() IItemTagsDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemTagsDo) Create(values ...*model.ItemTags) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemTagsDo) CreateInBatches(values []*model.ItemTags, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemTagsDo) Save(values ...*model.ItemTags) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemTagsDo) First() (*model.ItemTags, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTags), nil
	}
}

func (i itemTagsDo) Take() (*model.ItemTags, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTags), nil
	}
}

func (i itemTagsDo) Last() (*model.ItemTags, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTags), nil
	}
}

func (i itemTagsDo) Find() ([]*model.ItemTags, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemTags), err
}

func (i itemTagsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemTags, err error) {
	buf := make([]*model.ItemTags, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemTagsDo) FindInBatches(result *[]*model.ItemTags, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemTagsDo) Attrs(attrs ...field.AssignExpr) IItemTagsDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemTagsDo) Assign(attrs ...field.AssignExpr) IItemTagsDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemTagsDo) Joins(fields ...field.RelationField) IItemTagsDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemTagsDo) Preload(fields ...field.RelationField) IItemTagsDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemTagsDo) FirstOrInit() (*model.ItemTags, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTags), nil
	}
}

func (i itemTagsDo) FirstOrCreate() (*model.ItemTags, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemTags), nil
	}
}

func (i itemTagsDo) FindByPage(offset int, limit int) (result []*model.ItemTags, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemTagsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemTagsDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemTagsDo) Delete(models ...*model.ItemTags) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemTagsDo) withDO(do gen.Dao) *itemTagsDo {
	i.DO = *do.(*gen.DO)
	return i
}
