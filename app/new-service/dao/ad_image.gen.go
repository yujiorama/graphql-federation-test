// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/model"
)

func newAdImage(db *gorm.DB, opts ...gen.DOOption) adImage {
	_adImage := adImage{}

	_adImage.adImageDo.UseDB(db, opts...)
	_adImage.adImageDo.UseModel(&model.AdImage{})

	tableName := _adImage.adImageDo.TableName()
	_adImage.ALL = field.NewAsterisk(tableName)
	_adImage.ID = field.NewString(tableName, "id")
	_adImage.URL = field.NewString(tableName, "url")
	_adImage.Text = field.NewString(tableName, "text")

	_adImage.fillFieldMap()

	return _adImage
}

type adImage struct {
	adImageDo

	ALL  field.Asterisk
	ID   field.String
	URL  field.String
	Text field.String

	fieldMap map[string]field.Expr
}

func (a adImage) Table(newTableName string) *adImage {
	a.adImageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adImage) As(alias string) *adImage {
	a.adImageDo.DO = *(a.adImageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adImage) updateTableName(table string) *adImage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.URL = field.NewString(table, "url")
	a.Text = field.NewString(table, "text")

	a.fillFieldMap()

	return a
}

func (a *adImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adImage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["url"] = a.URL
	a.fieldMap["text"] = a.Text
}

func (a adImage) clone(db *gorm.DB) adImage {
	a.adImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adImage) replaceDB(db *gorm.DB) adImage {
	a.adImageDo.ReplaceDB(db)
	return a
}

type adImageDo struct{ gen.DO }

type IAdImageDo interface {
	gen.SubQuery
	Debug() IAdImageDo
	WithContext(ctx context.Context) IAdImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdImageDo
	WriteDB() IAdImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdImageDo
	Not(conds ...gen.Condition) IAdImageDo
	Or(conds ...gen.Condition) IAdImageDo
	Select(conds ...field.Expr) IAdImageDo
	Where(conds ...gen.Condition) IAdImageDo
	Order(conds ...field.Expr) IAdImageDo
	Distinct(cols ...field.Expr) IAdImageDo
	Omit(cols ...field.Expr) IAdImageDo
	Join(table schema.Tabler, on ...field.Expr) IAdImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdImageDo
	Group(cols ...field.Expr) IAdImageDo
	Having(conds ...gen.Condition) IAdImageDo
	Limit(limit int) IAdImageDo
	Offset(offset int) IAdImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdImageDo
	Unscoped() IAdImageDo
	Create(values ...*model.AdImage) error
	CreateInBatches(values []*model.AdImage, batchSize int) error
	Save(values ...*model.AdImage) error
	First() (*model.AdImage, error)
	Take() (*model.AdImage, error)
	Last() (*model.AdImage, error)
	Find() ([]*model.AdImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdImage, err error)
	FindInBatches(result *[]*model.AdImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdImageDo
	Assign(attrs ...field.AssignExpr) IAdImageDo
	Joins(fields ...field.RelationField) IAdImageDo
	Preload(fields ...field.RelationField) IAdImageDo
	FirstOrInit() (*model.AdImage, error)
	FirstOrCreate() (*model.AdImage, error)
	FindByPage(offset int, limit int) (result []*model.AdImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adImageDo) Debug() IAdImageDo {
	return a.withDO(a.DO.Debug())
}

func (a adImageDo) WithContext(ctx context.Context) IAdImageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adImageDo) ReadDB() IAdImageDo {
	return a.Clauses(dbresolver.Read)
}

func (a adImageDo) WriteDB() IAdImageDo {
	return a.Clauses(dbresolver.Write)
}

func (a adImageDo) Session(config *gorm.Session) IAdImageDo {
	return a.withDO(a.DO.Session(config))
}

func (a adImageDo) Clauses(conds ...clause.Expression) IAdImageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adImageDo) Returning(value interface{}, columns ...string) IAdImageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adImageDo) Not(conds ...gen.Condition) IAdImageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adImageDo) Or(conds ...gen.Condition) IAdImageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adImageDo) Select(conds ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adImageDo) Where(conds ...gen.Condition) IAdImageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adImageDo) Order(conds ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adImageDo) Distinct(cols ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adImageDo) Omit(cols ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adImageDo) Join(table schema.Tabler, on ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adImageDo) Group(cols ...field.Expr) IAdImageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adImageDo) Having(conds ...gen.Condition) IAdImageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adImageDo) Limit(limit int) IAdImageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adImageDo) Offset(offset int) IAdImageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdImageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adImageDo) Unscoped() IAdImageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adImageDo) Create(values ...*model.AdImage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adImageDo) CreateInBatches(values []*model.AdImage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adImageDo) Save(values ...*model.AdImage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adImageDo) First() (*model.AdImage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdImage), nil
	}
}

func (a adImageDo) Take() (*model.AdImage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdImage), nil
	}
}

func (a adImageDo) Last() (*model.AdImage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdImage), nil
	}
}

func (a adImageDo) Find() ([]*model.AdImage, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdImage), err
}

func (a adImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdImage, err error) {
	buf := make([]*model.AdImage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adImageDo) FindInBatches(result *[]*model.AdImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adImageDo) Attrs(attrs ...field.AssignExpr) IAdImageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adImageDo) Assign(attrs ...field.AssignExpr) IAdImageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adImageDo) Joins(fields ...field.RelationField) IAdImageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adImageDo) Preload(fields ...field.RelationField) IAdImageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adImageDo) FirstOrInit() (*model.AdImage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdImage), nil
	}
}

func (a adImageDo) FirstOrCreate() (*model.AdImage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdImage), nil
	}
}

func (a adImageDo) FindByPage(offset int, limit int) (result []*model.AdImage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adImageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adImageDo) Delete(models ...*model.AdImage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adImageDo) withDO(do gen.Dao) *adImageDo {
	a.DO = *do.(*gen.DO)
	return a
}
