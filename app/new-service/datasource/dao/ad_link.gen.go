// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/datasource/model"
)

func newAdLink(db *gorm.DB, opts ...gen.DOOption) adLink {
	_adLink := adLink{}

	_adLink.adLinkDo.UseDB(db, opts...)
	_adLink.adLinkDo.UseModel(&model.AdLink{})

	tableName := _adLink.adLinkDo.TableName()
	_adLink.ALL = field.NewAsterisk(tableName)
	_adLink.ID = field.NewString(tableName, "id")
	_adLink.URL = field.NewString(tableName, "url")
	_adLink.Text = field.NewString(tableName, "text")

	_adLink.fillFieldMap()

	return _adLink
}

type adLink struct {
	adLinkDo

	ALL  field.Asterisk
	ID   field.String
	URL  field.String
	Text field.String

	fieldMap map[string]field.Expr
}

func (a adLink) Table(newTableName string) *adLink {
	a.adLinkDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adLink) As(alias string) *adLink {
	a.adLinkDo.DO = *(a.adLinkDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adLink) updateTableName(table string) *adLink {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.URL = field.NewString(table, "url")
	a.Text = field.NewString(table, "text")

	a.fillFieldMap()

	return a
}

func (a *adLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adLink) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["url"] = a.URL
	a.fieldMap["text"] = a.Text
}

func (a adLink) clone(db *gorm.DB) adLink {
	a.adLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adLink) replaceDB(db *gorm.DB) adLink {
	a.adLinkDo.ReplaceDB(db)
	return a
}

type adLinkDo struct{ gen.DO }

type IAdLinkDo interface {
	gen.SubQuery
	Debug() IAdLinkDo
	WithContext(ctx context.Context) IAdLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdLinkDo
	WriteDB() IAdLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdLinkDo
	Not(conds ...gen.Condition) IAdLinkDo
	Or(conds ...gen.Condition) IAdLinkDo
	Select(conds ...field.Expr) IAdLinkDo
	Where(conds ...gen.Condition) IAdLinkDo
	Order(conds ...field.Expr) IAdLinkDo
	Distinct(cols ...field.Expr) IAdLinkDo
	Omit(cols ...field.Expr) IAdLinkDo
	Join(table schema.Tabler, on ...field.Expr) IAdLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdLinkDo
	Group(cols ...field.Expr) IAdLinkDo
	Having(conds ...gen.Condition) IAdLinkDo
	Limit(limit int) IAdLinkDo
	Offset(offset int) IAdLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdLinkDo
	Unscoped() IAdLinkDo
	Create(values ...*model.AdLink) error
	CreateInBatches(values []*model.AdLink, batchSize int) error
	Save(values ...*model.AdLink) error
	First() (*model.AdLink, error)
	Take() (*model.AdLink, error)
	Last() (*model.AdLink, error)
	Find() ([]*model.AdLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdLink, err error)
	FindInBatches(result *[]*model.AdLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdLinkDo
	Assign(attrs ...field.AssignExpr) IAdLinkDo
	Joins(fields ...field.RelationField) IAdLinkDo
	Preload(fields ...field.RelationField) IAdLinkDo
	FirstOrInit() (*model.AdLink, error)
	FirstOrCreate() (*model.AdLink, error)
	FindByPage(offset int, limit int) (result []*model.AdLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adLinkDo) Debug() IAdLinkDo {
	return a.withDO(a.DO.Debug())
}

func (a adLinkDo) WithContext(ctx context.Context) IAdLinkDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adLinkDo) ReadDB() IAdLinkDo {
	return a.Clauses(dbresolver.Read)
}

func (a adLinkDo) WriteDB() IAdLinkDo {
	return a.Clauses(dbresolver.Write)
}

func (a adLinkDo) Session(config *gorm.Session) IAdLinkDo {
	return a.withDO(a.DO.Session(config))
}

func (a adLinkDo) Clauses(conds ...clause.Expression) IAdLinkDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adLinkDo) Returning(value interface{}, columns ...string) IAdLinkDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adLinkDo) Not(conds ...gen.Condition) IAdLinkDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adLinkDo) Or(conds ...gen.Condition) IAdLinkDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adLinkDo) Select(conds ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adLinkDo) Where(conds ...gen.Condition) IAdLinkDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adLinkDo) Order(conds ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adLinkDo) Distinct(cols ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adLinkDo) Omit(cols ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adLinkDo) Join(table schema.Tabler, on ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adLinkDo) Group(cols ...field.Expr) IAdLinkDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adLinkDo) Having(conds ...gen.Condition) IAdLinkDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adLinkDo) Limit(limit int) IAdLinkDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adLinkDo) Offset(offset int) IAdLinkDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdLinkDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adLinkDo) Unscoped() IAdLinkDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adLinkDo) Create(values ...*model.AdLink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adLinkDo) CreateInBatches(values []*model.AdLink, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adLinkDo) Save(values ...*model.AdLink) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adLinkDo) First() (*model.AdLink, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdLink), nil
	}
}

func (a adLinkDo) Take() (*model.AdLink, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdLink), nil
	}
}

func (a adLinkDo) Last() (*model.AdLink, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdLink), nil
	}
}

func (a adLinkDo) Find() ([]*model.AdLink, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdLink), err
}

func (a adLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdLink, err error) {
	buf := make([]*model.AdLink, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adLinkDo) FindInBatches(result *[]*model.AdLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adLinkDo) Attrs(attrs ...field.AssignExpr) IAdLinkDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adLinkDo) Assign(attrs ...field.AssignExpr) IAdLinkDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adLinkDo) Joins(fields ...field.RelationField) IAdLinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adLinkDo) Preload(fields ...field.RelationField) IAdLinkDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adLinkDo) FirstOrInit() (*model.AdLink, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdLink), nil
	}
}

func (a adLinkDo) FirstOrCreate() (*model.AdLink, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdLink), nil
	}
}

func (a adLinkDo) FindByPage(offset int, limit int) (result []*model.AdLink, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adLinkDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adLinkDo) Delete(models ...*model.AdLink) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adLinkDo) withDO(do gen.Dao) *adLinkDo {
	a.DO = *do.(*gen.DO)
	return a
}
