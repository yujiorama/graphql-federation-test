// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/datasource/model"
)

func newItemAdImages(db *gorm.DB, opts ...gen.DOOption) itemAdImages {
	_itemAdImages := itemAdImages{}

	_itemAdImages.itemAdImagesDo.UseDB(db, opts...)
	_itemAdImages.itemAdImagesDo.UseModel(&model.ItemAdImages{})

	tableName := _itemAdImages.itemAdImagesDo.TableName()
	_itemAdImages.ALL = field.NewAsterisk(tableName)
	_itemAdImages.ItemID = field.NewString(tableName, "item_id")
	_itemAdImages.AdImageID = field.NewString(tableName, "ad_image_id")

	_itemAdImages.fillFieldMap()

	return _itemAdImages
}

type itemAdImages struct {
	itemAdImagesDo

	ALL       field.Asterisk
	ItemID    field.String
	AdImageID field.String

	fieldMap map[string]field.Expr
}

func (i itemAdImages) Table(newTableName string) *itemAdImages {
	i.itemAdImagesDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemAdImages) As(alias string) *itemAdImages {
	i.itemAdImagesDo.DO = *(i.itemAdImagesDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemAdImages) updateTableName(table string) *itemAdImages {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewString(table, "item_id")
	i.AdImageID = field.NewString(table, "ad_image_id")

	i.fillFieldMap()

	return i
}

func (i *itemAdImages) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemAdImages) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["ad_image_id"] = i.AdImageID
}

func (i itemAdImages) clone(db *gorm.DB) itemAdImages {
	i.itemAdImagesDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemAdImages) replaceDB(db *gorm.DB) itemAdImages {
	i.itemAdImagesDo.ReplaceDB(db)
	return i
}

type itemAdImagesDo struct{ gen.DO }

type IItemAdImagesDo interface {
	gen.SubQuery
	Debug() IItemAdImagesDo
	WithContext(ctx context.Context) IItemAdImagesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemAdImagesDo
	WriteDB() IItemAdImagesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemAdImagesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemAdImagesDo
	Not(conds ...gen.Condition) IItemAdImagesDo
	Or(conds ...gen.Condition) IItemAdImagesDo
	Select(conds ...field.Expr) IItemAdImagesDo
	Where(conds ...gen.Condition) IItemAdImagesDo
	Order(conds ...field.Expr) IItemAdImagesDo
	Distinct(cols ...field.Expr) IItemAdImagesDo
	Omit(cols ...field.Expr) IItemAdImagesDo
	Join(table schema.Tabler, on ...field.Expr) IItemAdImagesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemAdImagesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemAdImagesDo
	Group(cols ...field.Expr) IItemAdImagesDo
	Having(conds ...gen.Condition) IItemAdImagesDo
	Limit(limit int) IItemAdImagesDo
	Offset(offset int) IItemAdImagesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemAdImagesDo
	Unscoped() IItemAdImagesDo
	Create(values ...*model.ItemAdImages) error
	CreateInBatches(values []*model.ItemAdImages, batchSize int) error
	Save(values ...*model.ItemAdImages) error
	First() (*model.ItemAdImages, error)
	Take() (*model.ItemAdImages, error)
	Last() (*model.ItemAdImages, error)
	Find() ([]*model.ItemAdImages, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAdImages, err error)
	FindInBatches(result *[]*model.ItemAdImages, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ItemAdImages) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemAdImagesDo
	Assign(attrs ...field.AssignExpr) IItemAdImagesDo
	Joins(fields ...field.RelationField) IItemAdImagesDo
	Preload(fields ...field.RelationField) IItemAdImagesDo
	FirstOrInit() (*model.ItemAdImages, error)
	FirstOrCreate() (*model.ItemAdImages, error)
	FindByPage(offset int, limit int) (result []*model.ItemAdImages, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemAdImagesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemAdImagesDo) Debug() IItemAdImagesDo {
	return i.withDO(i.DO.Debug())
}

func (i itemAdImagesDo) WithContext(ctx context.Context) IItemAdImagesDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemAdImagesDo) ReadDB() IItemAdImagesDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemAdImagesDo) WriteDB() IItemAdImagesDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemAdImagesDo) Session(config *gorm.Session) IItemAdImagesDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemAdImagesDo) Clauses(conds ...clause.Expression) IItemAdImagesDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemAdImagesDo) Returning(value interface{}, columns ...string) IItemAdImagesDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemAdImagesDo) Not(conds ...gen.Condition) IItemAdImagesDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemAdImagesDo) Or(conds ...gen.Condition) IItemAdImagesDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemAdImagesDo) Select(conds ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemAdImagesDo) Where(conds ...gen.Condition) IItemAdImagesDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemAdImagesDo) Order(conds ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemAdImagesDo) Distinct(cols ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemAdImagesDo) Omit(cols ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemAdImagesDo) Join(table schema.Tabler, on ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemAdImagesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemAdImagesDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemAdImagesDo) Group(cols ...field.Expr) IItemAdImagesDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemAdImagesDo) Having(conds ...gen.Condition) IItemAdImagesDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemAdImagesDo) Limit(limit int) IItemAdImagesDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemAdImagesDo) Offset(offset int) IItemAdImagesDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemAdImagesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemAdImagesDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemAdImagesDo) Unscoped() IItemAdImagesDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemAdImagesDo) Create(values ...*model.ItemAdImages) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemAdImagesDo) CreateInBatches(values []*model.ItemAdImages, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemAdImagesDo) Save(values ...*model.ItemAdImages) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemAdImagesDo) First() (*model.ItemAdImages, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdImages), nil
	}
}

func (i itemAdImagesDo) Take() (*model.ItemAdImages, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdImages), nil
	}
}

func (i itemAdImagesDo) Last() (*model.ItemAdImages, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdImages), nil
	}
}

func (i itemAdImagesDo) Find() ([]*model.ItemAdImages, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemAdImages), err
}

func (i itemAdImagesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemAdImages, err error) {
	buf := make([]*model.ItemAdImages, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemAdImagesDo) FindInBatches(result *[]*model.ItemAdImages, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemAdImagesDo) Attrs(attrs ...field.AssignExpr) IItemAdImagesDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemAdImagesDo) Assign(attrs ...field.AssignExpr) IItemAdImagesDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemAdImagesDo) Joins(fields ...field.RelationField) IItemAdImagesDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemAdImagesDo) Preload(fields ...field.RelationField) IItemAdImagesDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemAdImagesDo) FirstOrInit() (*model.ItemAdImages, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdImages), nil
	}
}

func (i itemAdImagesDo) FirstOrCreate() (*model.ItemAdImages, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemAdImages), nil
	}
}

func (i itemAdImagesDo) FindByPage(offset int, limit int) (result []*model.ItemAdImages, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemAdImagesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemAdImagesDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemAdImagesDo) Delete(models ...*model.ItemAdImages) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemAdImagesDo) withDO(do gen.Dao) *itemAdImagesDo {
	i.DO = *do.(*gen.DO)
	return i
}
