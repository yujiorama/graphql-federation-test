// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	AdImage        *adImage
	AdLink         *adLink
	Item           *item
	ItemAdImages   *itemAdImages
	ItemAdLinks    *itemAdLinks
	ItemCategories *itemCategories
	ItemTags       *itemTags
	Tag            *tag
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdImage = &Q.AdImage
	AdLink = &Q.AdLink
	Item = &Q.Item
	ItemAdImages = &Q.ItemAdImages
	ItemAdLinks = &Q.ItemAdLinks
	ItemCategories = &Q.ItemCategories
	ItemTags = &Q.ItemTags
	Tag = &Q.Tag
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		AdImage:        newAdImage(db, opts...),
		AdLink:         newAdLink(db, opts...),
		Item:           newItem(db, opts...),
		ItemAdImages:   newItemAdImages(db, opts...),
		ItemAdLinks:    newItemAdLinks(db, opts...),
		ItemCategories: newItemCategories(db, opts...),
		ItemTags:       newItemTags(db, opts...),
		Tag:            newTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdImage        adImage
	AdLink         adLink
	Item           item
	ItemAdImages   itemAdImages
	ItemAdLinks    itemAdLinks
	ItemCategories itemCategories
	ItemTags       itemTags
	Tag            tag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AdImage:        q.AdImage.clone(db),
		AdLink:         q.AdLink.clone(db),
		Item:           q.Item.clone(db),
		ItemAdImages:   q.ItemAdImages.clone(db),
		ItemAdLinks:    q.ItemAdLinks.clone(db),
		ItemCategories: q.ItemCategories.clone(db),
		ItemTags:       q.ItemTags.clone(db),
		Tag:            q.Tag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AdImage:        q.AdImage.replaceDB(db),
		AdLink:         q.AdLink.replaceDB(db),
		Item:           q.Item.replaceDB(db),
		ItemAdImages:   q.ItemAdImages.replaceDB(db),
		ItemAdLinks:    q.ItemAdLinks.replaceDB(db),
		ItemCategories: q.ItemCategories.replaceDB(db),
		ItemTags:       q.ItemTags.replaceDB(db),
		Tag:            q.Tag.replaceDB(db),
	}
}

type queryCtx struct {
	AdImage        IAdImageDo
	AdLink         IAdLinkDo
	Item           IItemDo
	ItemAdImages   IItemAdImagesDo
	ItemAdLinks    IItemAdLinksDo
	ItemCategories IItemCategoriesDo
	ItemTags       IItemTagsDo
	Tag            ITagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdImage:        q.AdImage.WithContext(ctx),
		AdLink:         q.AdLink.WithContext(ctx),
		Item:           q.Item.WithContext(ctx),
		ItemAdImages:   q.ItemAdImages.WithContext(ctx),
		ItemAdLinks:    q.ItemAdLinks.WithContext(ctx),
		ItemCategories: q.ItemCategories.WithContext(ctx),
		ItemTags:       q.ItemTags.WithContext(ctx),
		Tag:            q.Tag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
