// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yujiorama.github.io/graphql-federation-test/app/new-service/datasource/model"
)

func newItemCategories(db *gorm.DB, opts ...gen.DOOption) itemCategories {
	_itemCategories := itemCategories{}

	_itemCategories.itemCategoriesDo.UseDB(db, opts...)
	_itemCategories.itemCategoriesDo.UseModel(&model.ItemCategories{})

	tableName := _itemCategories.itemCategoriesDo.TableName()
	_itemCategories.ALL = field.NewAsterisk(tableName)
	_itemCategories.ItemID = field.NewString(tableName, "item_id")
	_itemCategories.Category = field.NewString(tableName, "category")

	_itemCategories.fillFieldMap()

	return _itemCategories
}

type itemCategories struct {
	itemCategoriesDo

	ALL      field.Asterisk
	ItemID   field.String
	Category field.String

	fieldMap map[string]field.Expr
}

func (i itemCategories) Table(newTableName string) *itemCategories {
	i.itemCategoriesDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemCategories) As(alias string) *itemCategories {
	i.itemCategoriesDo.DO = *(i.itemCategoriesDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemCategories) updateTableName(table string) *itemCategories {
	i.ALL = field.NewAsterisk(table)
	i.ItemID = field.NewString(table, "item_id")
	i.Category = field.NewString(table, "category")

	i.fillFieldMap()

	return i
}

func (i *itemCategories) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemCategories) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["category"] = i.Category
}

func (i itemCategories) clone(db *gorm.DB) itemCategories {
	i.itemCategoriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemCategories) replaceDB(db *gorm.DB) itemCategories {
	i.itemCategoriesDo.ReplaceDB(db)
	return i
}

type itemCategoriesDo struct{ gen.DO }

type IItemCategoriesDo interface {
	gen.SubQuery
	Debug() IItemCategoriesDo
	WithContext(ctx context.Context) IItemCategoriesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItemCategoriesDo
	WriteDB() IItemCategoriesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItemCategoriesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemCategoriesDo
	Not(conds ...gen.Condition) IItemCategoriesDo
	Or(conds ...gen.Condition) IItemCategoriesDo
	Select(conds ...field.Expr) IItemCategoriesDo
	Where(conds ...gen.Condition) IItemCategoriesDo
	Order(conds ...field.Expr) IItemCategoriesDo
	Distinct(cols ...field.Expr) IItemCategoriesDo
	Omit(cols ...field.Expr) IItemCategoriesDo
	Join(table schema.Tabler, on ...field.Expr) IItemCategoriesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemCategoriesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItemCategoriesDo
	Group(cols ...field.Expr) IItemCategoriesDo
	Having(conds ...gen.Condition) IItemCategoriesDo
	Limit(limit int) IItemCategoriesDo
	Offset(offset int) IItemCategoriesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemCategoriesDo
	Unscoped() IItemCategoriesDo
	Create(values ...*model.ItemCategories) error
	CreateInBatches(values []*model.ItemCategories, batchSize int) error
	Save(values ...*model.ItemCategories) error
	First() (*model.ItemCategories, error)
	Take() (*model.ItemCategories, error)
	Last() (*model.ItemCategories, error)
	Find() ([]*model.ItemCategories, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemCategories, err error)
	FindInBatches(result *[]*model.ItemCategories, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ItemCategories) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemCategoriesDo
	Assign(attrs ...field.AssignExpr) IItemCategoriesDo
	Joins(fields ...field.RelationField) IItemCategoriesDo
	Preload(fields ...field.RelationField) IItemCategoriesDo
	FirstOrInit() (*model.ItemCategories, error)
	FirstOrCreate() (*model.ItemCategories, error)
	FindByPage(offset int, limit int) (result []*model.ItemCategories, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemCategoriesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemCategoriesDo) Debug() IItemCategoriesDo {
	return i.withDO(i.DO.Debug())
}

func (i itemCategoriesDo) WithContext(ctx context.Context) IItemCategoriesDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemCategoriesDo) ReadDB() IItemCategoriesDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemCategoriesDo) WriteDB() IItemCategoriesDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemCategoriesDo) Session(config *gorm.Session) IItemCategoriesDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemCategoriesDo) Clauses(conds ...clause.Expression) IItemCategoriesDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemCategoriesDo) Returning(value interface{}, columns ...string) IItemCategoriesDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemCategoriesDo) Not(conds ...gen.Condition) IItemCategoriesDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemCategoriesDo) Or(conds ...gen.Condition) IItemCategoriesDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemCategoriesDo) Select(conds ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemCategoriesDo) Where(conds ...gen.Condition) IItemCategoriesDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemCategoriesDo) Order(conds ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemCategoriesDo) Distinct(cols ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemCategoriesDo) Omit(cols ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemCategoriesDo) Join(table schema.Tabler, on ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemCategoriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemCategoriesDo) RightJoin(table schema.Tabler, on ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemCategoriesDo) Group(cols ...field.Expr) IItemCategoriesDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemCategoriesDo) Having(conds ...gen.Condition) IItemCategoriesDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemCategoriesDo) Limit(limit int) IItemCategoriesDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemCategoriesDo) Offset(offset int) IItemCategoriesDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemCategoriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemCategoriesDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemCategoriesDo) Unscoped() IItemCategoriesDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemCategoriesDo) Create(values ...*model.ItemCategories) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemCategoriesDo) CreateInBatches(values []*model.ItemCategories, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemCategoriesDo) Save(values ...*model.ItemCategories) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemCategoriesDo) First() (*model.ItemCategories, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCategories), nil
	}
}

func (i itemCategoriesDo) Take() (*model.ItemCategories, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCategories), nil
	}
}

func (i itemCategoriesDo) Last() (*model.ItemCategories, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCategories), nil
	}
}

func (i itemCategoriesDo) Find() ([]*model.ItemCategories, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemCategories), err
}

func (i itemCategoriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemCategories, err error) {
	buf := make([]*model.ItemCategories, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemCategoriesDo) FindInBatches(result *[]*model.ItemCategories, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemCategoriesDo) Attrs(attrs ...field.AssignExpr) IItemCategoriesDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemCategoriesDo) Assign(attrs ...field.AssignExpr) IItemCategoriesDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemCategoriesDo) Joins(fields ...field.RelationField) IItemCategoriesDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemCategoriesDo) Preload(fields ...field.RelationField) IItemCategoriesDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemCategoriesDo) FirstOrInit() (*model.ItemCategories, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCategories), nil
	}
}

func (i itemCategoriesDo) FirstOrCreate() (*model.ItemCategories, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemCategories), nil
	}
}

func (i itemCategoriesDo) FindByPage(offset int, limit int) (result []*model.ItemCategories, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemCategoriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemCategoriesDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemCategoriesDo) Delete(models ...*model.ItemCategories) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemCategoriesDo) withDO(do gen.Dao) *itemCategoriesDo {
	i.DO = *do.(*gen.DO)
	return i
}
