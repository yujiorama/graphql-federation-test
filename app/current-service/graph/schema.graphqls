type Query {
    getItem(itemId: ID!): Item
    getTag(tagId: ID!): Tag
    findItemsByTag(name: String, value: String): [Item!]!
    node(id: ID!, typename: String!): Node
}

type Mutation {
    addItem(input: AddItemInput!): AddItemPayload!
    addTagToItem(input: AddTagToItemInput!): AddTagToItemPayload!
    createTag(input: CreateTagInput!): CreateTagPayload!
}

interface Node {
    id: ID!
}

interface NameValue {
    name: String!
    value: String!
}

type AdLink {
    text: String!
    url: String!
}

type AdImage {
    text: String
    url: String!
}

union Ad = AdLink | AdImage

enum Category {
    SHOES
    CLOTHES
    ACCESSORIES
}

type Item implements Node & NameValue {
    id: ID!
    name: String!
    value: String!
    price: Int
    tags: [Tag!]!
    ads: [Ad!]!
    categories: [Category!]!
}

type Tag implements Node & NameValue {
    id: ID!
    name: String!
    value: String!
    items: [Item!]!
}

input AddItemInput {
    name: String!
    price: Int
}

type AddItemPayload {
    ok: Boolean!
    item: Item
}

input AddTagToItemInput {
    itemId: ID!
    tagId: ID!
}

type AddTagToItemPayload {
    ok: Boolean!
    item: Item
}

input CreateTagInput {
    name: String!
    value: String!
}

type CreateTagPayload {
    ok: Boolean!
    tag: Tag
}

